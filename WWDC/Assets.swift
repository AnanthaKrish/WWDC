//
//  Assets.swift
//  WWDC
//
//  Created by Genady Okrain on 4/20/16.
//  Copyright (c) 2016 Sugar So Studio. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Assets : NSObject {

    //// Cache

    private struct Cache {
        static let color55: UIColor = UIColor(red: 0.970, green: 0.970, blue: 0.970, alpha: 1.000)
        static var imageOfToggleallactive: UIImage?
        static var toggleallactiveTargets: [AnyObject]?
        static var imageOfUBER_API_Badge: UIImage?
        static var uBER_API_BadgeTargets: [AnyObject]?
        static var imageOfGear: UIImage?
        static var gearTargets: [AnyObject]?
    }

    //// Colors

    public class var color55: UIColor { return Cache.color55 }

    //// Drawing Methods

    public class func drawLocation() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color46 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)
        let color48 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color49 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 0.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 1)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// location
        //// Shape-2 Drawing
        let shape2Path = UIBezierPath()
        shape2Path.moveToPoint(CGPoint(x: 44, y: 20.22))
        shape2Path.addCurveToPoint(CGPoint(x: 22, y: 62), controlPoint1: CGPoint(x: 44, y: 38.55), controlPoint2: CGPoint(x: 22, y: 62))
        shape2Path.addCurveToPoint(CGPoint(x: 0, y: 20.22), controlPoint1: CGPoint(x: 22, y: 62), controlPoint2: CGPoint(x: 0, y: 38.99))
        shape2Path.addCurveToPoint(CGPoint(x: 22, y: 0), controlPoint1: CGPoint(x: 0, y: 9.05), controlPoint2: CGPoint(x: 9.85, y: 0))
        shape2Path.addCurveToPoint(CGPoint(x: 44, y: 20.22), controlPoint1: CGPoint(x: 34.15, y: 0), controlPoint2: CGPoint(x: 44, y: 9.05))
        shape2Path.addLineToPoint(CGPoint(x: 44, y: 20.22))
        shape2Path.closePath()
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = true;

        color49.setFill()
        shape2Path.fill()
        color46.setStroke()
        shape2Path.lineWidth = 3
        shape2Path.stroke()


        //// Oval-2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 13, y: 15, width: 18, height: 18))
        color48.setStroke()
        oval2Path.lineWidth = 3
        oval2Path.stroke()





        CGContextRestoreGState(context)
    }

    public class func drawAddToCalendar() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color52 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 0)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Portrait
        //// add-to-calendar
        //// Rectangle-303 Drawing
        let rectangle303Path = UIBezierPath(rect: CGRect(x: 48, y: 0, width: 4, height: 11))
        color50.setFill()
        rectangle303Path.fill()


        //// Rectangle-304 Drawing
        let rectangle304Path = UIBezierPath(rect: CGRect(x: 15, y: 0, width: 4, height: 11))
        color50.setFill()
        rectangle304Path.fill()


        //// Rectangle-29 Drawing
        let rectangle29Path = UIBezierPath()
        rectangle29Path.moveToPoint(CGPoint(x: 55.5, y: 59))
        rectangle29Path.addLineToPoint(CGPoint(x: 7.01, y: 59))
        rectangle29Path.addCurveToPoint(CGPoint(x: 0, y: 52.01), controlPoint1: CGPoint(x: 3.14, y: 59), controlPoint2: CGPoint(x: 0, y: 55.87))
        rectangle29Path.addLineToPoint(CGPoint(x: 0, y: 10.99))
        rectangle29Path.addCurveToPoint(CGPoint(x: 7.01, y: 4), controlPoint1: CGPoint(x: 0, y: 7.13), controlPoint2: CGPoint(x: 3.14, y: 4))
        rectangle29Path.addLineToPoint(CGPoint(x: 60.99, y: 4))
        rectangle29Path.addCurveToPoint(CGPoint(x: 68, y: 10.99), controlPoint1: CGPoint(x: 64.86, y: 4), controlPoint2: CGPoint(x: 68, y: 7.13))
        rectangle29Path.addLineToPoint(CGPoint(x: 68, y: 36))
        rectangle29Path.addLineToPoint(CGPoint(x: 65, y: 36))
        rectangle29Path.addLineToPoint(CGPoint(x: 65, y: 11.01))
        rectangle29Path.addCurveToPoint(CGPoint(x: 61, y: 7), controlPoint1: CGPoint(x: 65, y: 8.8), controlPoint2: CGPoint(x: 63.21, y: 7))
        rectangle29Path.addLineToPoint(CGPoint(x: 7, y: 7))
        rectangle29Path.addCurveToPoint(CGPoint(x: 3, y: 11.01), controlPoint1: CGPoint(x: 4.79, y: 7), controlPoint2: CGPoint(x: 3, y: 8.79))
        rectangle29Path.addLineToPoint(CGPoint(x: 3, y: 51.99))
        rectangle29Path.addCurveToPoint(CGPoint(x: 7, y: 56), controlPoint1: CGPoint(x: 3, y: 54.2), controlPoint2: CGPoint(x: 4.79, y: 56))
        rectangle29Path.addLineToPoint(CGPoint(x: 50, y: 56))
        rectangle29Path.addLineToPoint(CGPoint(x: 50, y: 59))
        rectangle29Path.addLineToPoint(CGPoint(x: 55.5, y: 59))
        rectangle29Path.closePath()
        rectangle29Path.miterLimit = 4;

        rectangle29Path.usesEvenOddFillRule = true;

        color52.setFill()
        rectangle29Path.fill()


        //// Rectangle-30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 65, y: 45, width: 3, height: 15))
        color52.setFill()
        rectangle30Path.fill()


        //// Rectangle-31 Drawing
        let rectangle31Path = UIBezierPath()
        rectangle31Path.moveToPoint(CGPoint(x: 59, y: 53.92))
        rectangle31Path.addLineToPoint(CGPoint(x: 74, y: 54.02))
        rectangle31Path.addLineToPoint(CGPoint(x: 74, y: 51))
        rectangle31Path.addLineToPoint(CGPoint(x: 59, y: 51))
        rectangle31Path.addLineToPoint(CGPoint(x: 59, y: 53.92))
        rectangle31Path.closePath()
        rectangle31Path.miterLimit = 4;

        rectangle31Path.usesEvenOddFillRule = true;

        color52.setFill()
        rectangle31Path.fill()







        CGContextRestoreGState(context)
    }

    public class func drawMap(frame frame: CGRect = CGRect(x: 0, y: 92, width: 20, height: 28)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color49 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 0.000)
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color52 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.20000 * frame.width, frame.minY + 0.25000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// content
        //// map
        //// Shape Drawing
        let shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPoint(x: 26, y: 11.74))
        shapePath.addCurveToPoint(CGPoint(x: 13, y: 36), controlPoint1: CGPoint(x: 26, y: 22.39), controlPoint2: CGPoint(x: 13, y: 36))
        shapePath.addCurveToPoint(CGPoint(x: 0, y: 11.74), controlPoint1: CGPoint(x: 13, y: 36), controlPoint2: CGPoint(x: 0, y: 22.64))
        shapePath.addCurveToPoint(CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.26), controlPoint2: CGPoint(x: 5.82, y: 0))
        shapePath.addCurveToPoint(CGPoint(x: 26, y: 11.74), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.26))
        shapePath.addLineToPoint(CGPoint(x: 26, y: 11.74))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        color49.setFill()
        shapePath.fill()
        color52.setStroke()
        shapePath.lineWidth = 2
        shapePath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 8, y: 9, width: 9, height: 9))
        color50.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()









        CGContextRestoreGState(context)
    }

    public class func drawBlankstate() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color53 = UIColor(red: 0.902, green: 0.902, blue: 0.902, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Blank-State
        //// toggle-going-2 Drawing
        let togglegoing2Path = UIBezierPath()
        togglegoing2Path.moveToPoint(CGPoint(x: 198.15, y: 0))
        togglegoing2Path.addLineToPoint(CGPoint(x: 224, y: 25.8))
        togglegoing2Path.addLineToPoint(CGPoint(x: 73.23, y: 176.03))
        togglegoing2Path.addLineToPoint(CGPoint(x: 0, y: 102.93))
        togglegoing2Path.addLineToPoint(CGPoint(x: 25.85, y: 77.13))
        togglegoing2Path.addLineToPoint(CGPoint(x: 73.23, y: 124.43))
        togglegoing2Path.addLineToPoint(CGPoint(x: 198.15, y: 0))
        togglegoing2Path.closePath()
        togglegoing2Path.miterLimit = 4;

        togglegoing2Path.usesEvenOddFillRule = true;

        color53.setFill()
        togglegoing2Path.fill()





        CGContextRestoreGState(context)
    }

    public class func drawToggleallactive() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// Segmented-Control
        //// toggle-all-active
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 3))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 3))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 7))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 10))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 10))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 7))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 7))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 14))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 17))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 17))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 14))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 14))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        bezier2Path.usesEvenOddFillRule = true;

        color50.setFill()
        bezier2Path.fill()









        CGContextRestoreGState(context)
    }

    public class func drawTogglegoing(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// Segmented-Control
        //// toggle-going Drawing
        let togglegoingPath = UIBezierPath()
        togglegoingPath.moveToPoint(CGPoint(x: 8.5, y: 14.47))
        togglegoingPath.addLineToPoint(CGPoint(x: 23, y: 0))
        togglegoingPath.addLineToPoint(CGPoint(x: 26, y: 3))
        togglegoingPath.addLineToPoint(CGPoint(x: 8.5, y: 20.47))
        togglegoingPath.addLineToPoint(CGPoint(x: 0, y: 11.97))
        togglegoingPath.addLineToPoint(CGPoint(x: 3, y: 8.97))
        togglegoingPath.addLineToPoint(CGPoint(x: 8.5, y: 14.47))
        togglegoingPath.closePath()
        togglegoingPath.miterLimit = 4;

        togglegoingPath.usesEvenOddFillRule = true;

        initColor.setFill()
        togglegoingPath.fill()







        CGContextRestoreGState(context)
    }

    public class func drawUBER_API_Badge() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color56 = UIColor(red: 0.760, green: 0.759, blue: 0.788, alpha: 1.000)
        let color57 = UIColor(red: 0.054, green: 0.053, blue: 0.081, alpha: 1.000)
        let color58 = UIColor(red: 0.816, green: 0.815, blue: 0.840, alpha: 1.000)
        let color59 = UIColor(red: 0.189, green: 0.190, blue: 0.236, alpha: 1.000)

        //// Gradient Declarations
        let sVGID_1_ = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color58.CGColor, color56.CGColor], [0, 1])!
        let sVGID_3_ = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color58.CGColor, color56.CGColor], [0, 1])!
        let sVGID_2_ = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color59.CGColor, color57.CGColor], [0, 1])!

        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 42.2, y: 50))
        bezier2Path.addLineToPoint(CGPoint(x: 7.8, y: 50))
        bezier2Path.addCurveToPoint(CGPoint(x: 0, y: 42.2), controlPoint1: CGPoint(x: 3.5, y: 50), controlPoint2: CGPoint(x: 0, y: 46.5))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 7.8))
        bezier2Path.addCurveToPoint(CGPoint(x: 7.8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.5), controlPoint2: CGPoint(x: 3.5, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 42.3, y: 0))
        bezier2Path.addCurveToPoint(CGPoint(x: 50, y: 7.8), controlPoint1: CGPoint(x: 46.5, y: 0), controlPoint2: CGPoint(x: 50, y: 3.5))
        bezier2Path.addLineToPoint(CGPoint(x: 50, y: 42.3))
        bezier2Path.addCurveToPoint(CGPoint(x: 42.2, y: 50), controlPoint1: CGPoint(x: 50, y: 46.5), controlPoint2: CGPoint(x: 46.5, y: 50))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        CGContextSaveGState(context)
        bezier2Path.addClip()
        CGContextDrawLinearGradient(context, sVGID_1_,
            CGPoint(x: 2.31, y: 2.29),
            CGPoint(x: 47.72, y: 47.73),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 42, y: 48))
        bezier4Path.addLineToPoint(CGPoint(x: 8, y: 48))
        bezier4Path.addCurveToPoint(CGPoint(x: 2, y: 42), controlPoint1: CGPoint(x: 4.7, y: 48), controlPoint2: CGPoint(x: 2, y: 45.3))
        bezier4Path.addLineToPoint(CGPoint(x: 2, y: 8))
        bezier4Path.addCurveToPoint(CGPoint(x: 8, y: 2), controlPoint1: CGPoint(x: 2, y: 4.7), controlPoint2: CGPoint(x: 4.7, y: 2))
        bezier4Path.addLineToPoint(CGPoint(x: 42, y: 2))
        bezier4Path.addCurveToPoint(CGPoint(x: 48, y: 8), controlPoint1: CGPoint(x: 45.3, y: 2), controlPoint2: CGPoint(x: 48, y: 4.7))
        bezier4Path.addLineToPoint(CGPoint(x: 48, y: 42))
        bezier4Path.addCurveToPoint(CGPoint(x: 42, y: 48), controlPoint1: CGPoint(x: 48, y: 45.3), controlPoint2: CGPoint(x: 45.3, y: 48))
        bezier4Path.closePath()
        bezier4Path.miterLimit = 4;

        CGContextSaveGState(context)
        bezier4Path.addClip()
        CGContextDrawLinearGradient(context, sVGID_2_,
            CGPoint(x: 2.18, y: 2.21),
            CGPoint(x: 49.33, y: 49.31),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 28, y: 10))
        bezier6Path.addLineToPoint(CGPoint(x: 28, y: 12))
        bezier6Path.addCurveToPoint(CGPoint(x: 30, y: 14), controlPoint1: CGPoint(x: 28, y: 13.1), controlPoint2: CGPoint(x: 28.9, y: 14))
        bezier6Path.addLineToPoint(CGPoint(x: 36, y: 14))
        bezier6Path.addLineToPoint(CGPoint(x: 36, y: 31))
        bezier6Path.addCurveToPoint(CGPoint(x: 31, y: 36), controlPoint1: CGPoint(x: 36, y: 33.8), controlPoint2: CGPoint(x: 33.8, y: 36))
        bezier6Path.addLineToPoint(CGPoint(x: 19, y: 36))
        bezier6Path.addCurveToPoint(CGPoint(x: 14, y: 31), controlPoint1: CGPoint(x: 16.2, y: 36), controlPoint2: CGPoint(x: 14, y: 33.8))
        bezier6Path.addLineToPoint(CGPoint(x: 14, y: 14))
        bezier6Path.addLineToPoint(CGPoint(x: 22, y: 14))
        bezier6Path.addLineToPoint(CGPoint(x: 22, y: 12))
        bezier6Path.addCurveToPoint(CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 22, y: 10.9), controlPoint2: CGPoint(x: 21.1, y: 10))
        bezier6Path.addLineToPoint(CGPoint(x: 12, y: 10))
        bezier6Path.addCurveToPoint(CGPoint(x: 10, y: 12), controlPoint1: CGPoint(x: 10.9, y: 10), controlPoint2: CGPoint(x: 10, y: 10.9))
        bezier6Path.addLineToPoint(CGPoint(x: 10, y: 31))
        bezier6Path.addCurveToPoint(CGPoint(x: 19, y: 40), controlPoint1: CGPoint(x: 10, y: 36), controlPoint2: CGPoint(x: 14, y: 40))
        bezier6Path.addLineToPoint(CGPoint(x: 31, y: 40))
        bezier6Path.addCurveToPoint(CGPoint(x: 40, y: 31), controlPoint1: CGPoint(x: 36, y: 40), controlPoint2: CGPoint(x: 40, y: 36))
        bezier6Path.addLineToPoint(CGPoint(x: 40, y: 12))
        bezier6Path.addCurveToPoint(CGPoint(x: 38, y: 10), controlPoint1: CGPoint(x: 40, y: 10.9), controlPoint2: CGPoint(x: 39.1, y: 10))
        bezier6Path.addLineToPoint(CGPoint(x: 28, y: 10))
        bezier6Path.closePath()
        bezier6Path.miterLimit = 4;

        CGContextSaveGState(context)
        bezier6Path.addClip()
        CGContextDrawLinearGradient(context, sVGID_3_,
            CGPoint(x: 11.62, y: 9.56),
            CGPoint(x: 38.36, y: 36.31),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)
    }

    public class func drawGear() {
        //// Color Declarations
        let strokeColor = UIColor(red: 0.416, green: 0.463, blue: 0.863, alpha: 1.000)

        //// Welcome
        //// Main Drawing
        let mainPath = UIBezierPath()
        mainPath.moveToPoint(CGPoint(x: 11.94, y: 1))
        mainPath.addLineToPoint(CGPoint(x: 10.38, y: 4.71))
        mainPath.addCurveToPoint(CGPoint(x: 9.51, y: 5.11), controlPoint1: CGPoint(x: 10.07, y: 4.8), controlPoint2: CGPoint(x: 9.79, y: 4.96))
        mainPath.addLineToPoint(CGPoint(x: 5.8, y: 3.56))
        mainPath.addLineToPoint(CGPoint(x: 3.56, y: 5.8))
        mainPath.addLineToPoint(CGPoint(x: 5.11, y: 9.51))
        mainPath.addCurveToPoint(CGPoint(x: 4.71, y: 10.38), controlPoint1: CGPoint(x: 4.96, y: 9.82), controlPoint2: CGPoint(x: 4.83, y: 10.07))
        mainPath.addLineToPoint(CGPoint(x: 1, y: 11.94))
        mainPath.addLineToPoint(CGPoint(x: 1, y: 15.06))
        mainPath.addLineToPoint(CGPoint(x: 4.71, y: 16.62))
        mainPath.addCurveToPoint(CGPoint(x: 5.11, y: 17.49), controlPoint1: CGPoint(x: 4.83, y: 16.93), controlPoint2: CGPoint(x: 4.96, y: 17.18))
        mainPath.addLineToPoint(CGPoint(x: 3.56, y: 21.2))
        mainPath.addLineToPoint(CGPoint(x: 5.8, y: 23.44))
        mainPath.addLineToPoint(CGPoint(x: 9.51, y: 21.89))
        mainPath.addCurveToPoint(CGPoint(x: 10.38, y: 22.29), controlPoint1: CGPoint(x: 9.79, y: 22.01), controlPoint2: CGPoint(x: 10.07, y: 22.17))
        mainPath.addLineToPoint(CGPoint(x: 11.94, y: 26))
        mainPath.addLineToPoint(CGPoint(x: 15.06, y: 26))
        mainPath.addLineToPoint(CGPoint(x: 16.62, y: 22.29))
        mainPath.addCurveToPoint(CGPoint(x: 17.49, y: 21.89), controlPoint1: CGPoint(x: 16.9, y: 22.17), controlPoint2: CGPoint(x: 17.21, y: 22.04))
        mainPath.addLineToPoint(CGPoint(x: 21.2, y: 23.44))
        mainPath.addLineToPoint(CGPoint(x: 23.44, y: 21.2))
        mainPath.addLineToPoint(CGPoint(x: 21.89, y: 17.49))
        mainPath.addCurveToPoint(CGPoint(x: 22.29, y: 16.62), controlPoint1: CGPoint(x: 22.01, y: 17.21), controlPoint2: CGPoint(x: 22.17, y: 16.9))
        mainPath.addLineToPoint(CGPoint(x: 26, y: 15.06))
        mainPath.addLineToPoint(CGPoint(x: 26, y: 11.94))
        mainPath.addLineToPoint(CGPoint(x: 22.29, y: 10.38))
        mainPath.addCurveToPoint(CGPoint(x: 21.89, y: 9.51), controlPoint1: CGPoint(x: 22.2, y: 10.1), controlPoint2: CGPoint(x: 22.04, y: 9.79))
        mainPath.addLineToPoint(CGPoint(x: 23.44, y: 5.8))
        mainPath.addLineToPoint(CGPoint(x: 21.2, y: 3.56))
        mainPath.addLineToPoint(CGPoint(x: 17.49, y: 5.11))
        mainPath.addCurveToPoint(CGPoint(x: 16.62, y: 4.71), controlPoint1: CGPoint(x: 17.21, y: 4.99), controlPoint2: CGPoint(x: 16.9, y: 4.83))
        mainPath.addLineToPoint(CGPoint(x: 15.06, y: 1))
        mainPath.addLineToPoint(CGPoint(x: 11.94, y: 1))
        mainPath.addLineToPoint(CGPoint(x: 11.94, y: 1))
        mainPath.closePath()
        mainPath.moveToPoint(CGPoint(x: 13.5, y: 8.79))
        mainPath.addCurveToPoint(CGPoint(x: 18.18, y: 13.47), controlPoint1: CGPoint(x: 16.09, y: 8.79), controlPoint2: CGPoint(x: 18.18, y: 10.88))
        mainPath.addCurveToPoint(CGPoint(x: 13.5, y: 18.14), controlPoint1: CGPoint(x: 18.18, y: 16.06), controlPoint2: CGPoint(x: 16.09, y: 18.14))
        mainPath.addCurveToPoint(CGPoint(x: 8.82, y: 13.47), controlPoint1: CGPoint(x: 10.91, y: 18.14), controlPoint2: CGPoint(x: 8.82, y: 16.06))
        mainPath.addCurveToPoint(CGPoint(x: 13.5, y: 8.79), controlPoint1: CGPoint(x: 8.82, y: 10.88), controlPoint2: CGPoint(x: 10.91, y: 8.79))
        mainPath.addLineToPoint(CGPoint(x: 13.5, y: 8.79))
        mainPath.closePath()
        mainPath.miterLimit = 4;

        mainPath.usesEvenOddFillRule = true;

        UIColor.whiteColor().setFill()
        mainPath.fill()
        strokeColor.setStroke()
        mainPath.lineWidth = 1
        mainPath.stroke()
    }

    public class func drawEnvelope() {
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.416, green: 0.463, blue: 0.863, alpha: 1.000)

        //// Welcome
        //// Main
        //// Icon
        //// Main 2 Drawing
        let main2Path = UIBezierPath()
        main2Path.moveToPoint(CGPoint(x: 0, y: 0))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 2))
        main2Path.addLineToPoint(CGPoint(x: 8, y: 6))
        main2Path.addLineToPoint(CGPoint(x: 16, y: 2))
        main2Path.addLineToPoint(CGPoint(x: 16, y: 0))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 0))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 0))
        main2Path.closePath()
        main2Path.moveToPoint(CGPoint(x: 0, y: 4))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 12))
        main2Path.addLineToPoint(CGPoint(x: 16, y: 12))
        main2Path.addLineToPoint(CGPoint(x: 16, y: 4))
        main2Path.addLineToPoint(CGPoint(x: 8, y: 8))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 4))
        main2Path.addLineToPoint(CGPoint(x: 0, y: 4))
        main2Path.closePath()
        main2Path.miterLimit = 4;

        main2Path.usesEvenOddFillRule = true;

        fillColor2.setFill()
        main2Path.fill()
    }

    public class func drawHeart() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.816, green: 0.004, blue: 0.106, alpha: 1.000)

        //// Welcome
        //// Main
        //// Shape Drawing
        let shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPoint(x: 4, y: 0))
        shapePath.addCurveToPoint(CGPoint(x: 1.18, y: 1.18), controlPoint1: CGPoint(x: 2.9, y: 0), controlPoint2: CGPoint(x: 1.92, y: 0.46))
        shapePath.addCurveToPoint(CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.46, y: 1.9), controlPoint2: CGPoint(x: 0, y: 2.88))
        shapePath.addCurveToPoint(CGPoint(x: 1.18, y: 6.82), controlPoint1: CGPoint(x: 0, y: 5.1), controlPoint2: CGPoint(x: 0.46, y: 6.08))
        shapePath.addLineToPoint(CGPoint(x: 8, y: 13.64))
        shapePath.addLineToPoint(CGPoint(x: 14.82, y: 6.82))
        shapePath.addCurveToPoint(CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 15.54, y: 6.1), controlPoint2: CGPoint(x: 16, y: 5.12))
        shapePath.addCurveToPoint(CGPoint(x: 14.82, y: 1.18), controlPoint1: CGPoint(x: 16, y: 2.9), controlPoint2: CGPoint(x: 15.54, y: 1.92))
        shapePath.addCurveToPoint(CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 14.1, y: 0.46), controlPoint2: CGPoint(x: 13.12, y: 0))
        shapePath.addCurveToPoint(CGPoint(x: 9.18, y: 1.18), controlPoint1: CGPoint(x: 10.9, y: 0), controlPoint2: CGPoint(x: 9.92, y: 0.46))
        shapePath.addCurveToPoint(CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 8.46, y: 1.9), controlPoint2: CGPoint(x: 8, y: 2.88))
        shapePath.addCurveToPoint(CGPoint(x: 6.82, y: 1.18), controlPoint1: CGPoint(x: 8, y: 2.9), controlPoint2: CGPoint(x: 7.54, y: 1.92))
        shapePath.addCurveToPoint(CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 6.1, y: 0.46), controlPoint2: CGPoint(x: 5.12, y: 0))
        shapePath.addLineToPoint(CGPoint(x: 4, y: 0))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        fillColor3.setFill()
        shapePath.fill()
    }

    public class func drawTwitter() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.369, green: 0.624, blue: 0.796, alpha: 1.000)

        //// Welcome
        //// Main
        //// Twitter_logo_blue
        //// path-1 Drawing


        //// Clip-2


        //// Fill-1 Drawing
        let fill1Path = UIBezierPath()
        fill1Path.moveToPoint(CGPoint(x: 5.02, y: 14))
        fill1Path.addCurveToPoint(CGPoint(x: 0, y: 12.42), controlPoint1: CGPoint(x: 3.17, y: 14), controlPoint2: CGPoint(x: 1.45, y: 13.42))
        fill1Path.addCurveToPoint(CGPoint(x: 0.78, y: 12.47), controlPoint1: CGPoint(x: 0.26, y: 12.45), controlPoint2: CGPoint(x: 0.52, y: 12.47))
        fill1Path.addCurveToPoint(CGPoint(x: 4.85, y: 10.96), controlPoint1: CGPoint(x: 2.32, y: 12.47), controlPoint2: CGPoint(x: 3.73, y: 11.9))
        fill1Path.addCurveToPoint(CGPoint(x: 1.79, y: 8.51), controlPoint1: CGPoint(x: 3.42, y: 10.93), controlPoint2: CGPoint(x: 2.21, y: 9.91))
        fill1Path.addCurveToPoint(CGPoint(x: 2.41, y: 8.58), controlPoint1: CGPoint(x: 1.99, y: 8.56), controlPoint2: CGPoint(x: 2.19, y: 8.58))
        fill1Path.addCurveToPoint(CGPoint(x: 3.27, y: 8.45), controlPoint1: CGPoint(x: 2.7, y: 8.58), controlPoint2: CGPoint(x: 2.99, y: 8.53))
        fill1Path.addCurveToPoint(CGPoint(x: 0.64, y: 5), controlPoint1: CGPoint(x: 1.77, y: 8.13), controlPoint2: CGPoint(x: 0.64, y: 6.71))
        fill1Path.addCurveToPoint(CGPoint(x: 0.64, y: 4.96), controlPoint1: CGPoint(x: 0.64, y: 4.99), controlPoint2: CGPoint(x: 0.64, y: 4.97))
        fill1Path.addCurveToPoint(CGPoint(x: 2.13, y: 5.4), controlPoint1: CGPoint(x: 1.08, y: 5.22), controlPoint2: CGPoint(x: 1.59, y: 5.38))
        fill1Path.addCurveToPoint(CGPoint(x: 0.67, y: 2.47), controlPoint1: CGPoint(x: 1.25, y: 4.77), controlPoint2: CGPoint(x: 0.67, y: 3.69))
        fill1Path.addCurveToPoint(CGPoint(x: 1.11, y: 0.7), controlPoint1: CGPoint(x: 0.67, y: 1.82), controlPoint2: CGPoint(x: 0.83, y: 1.22))
        fill1Path.addCurveToPoint(CGPoint(x: 7.86, y: 4.38), controlPoint1: CGPoint(x: 2.73, y: 2.83), controlPoint2: CGPoint(x: 5.14, y: 4.23))
        fill1Path.addCurveToPoint(CGPoint(x: 7.78, y: 3.57), controlPoint1: CGPoint(x: 7.81, y: 4.12), controlPoint2: CGPoint(x: 7.78, y: 3.85))
        fill1Path.addCurveToPoint(CGPoint(x: 11.05, y: 0.05), controlPoint1: CGPoint(x: 7.78, y: 1.63), controlPoint2: CGPoint(x: 9.24, y: 0.05))
        fill1Path.addCurveToPoint(CGPoint(x: 13.44, y: 1.16), controlPoint1: CGPoint(x: 11.99, y: 0.05), controlPoint2: CGPoint(x: 12.85, y: 0.48))
        fill1Path.addCurveToPoint(CGPoint(x: 15.52, y: 0.31), controlPoint1: CGPoint(x: 14.19, y: 1.01), controlPoint2: CGPoint(x: 14.89, y: 0.71))
        fill1Path.addCurveToPoint(CGPoint(x: 14.08, y: 2.26), controlPoint1: CGPoint(x: 15.28, y: 1.13), controlPoint2: CGPoint(x: 14.76, y: 1.82))
        fill1Path.addCurveToPoint(CGPoint(x: 15.96, y: 1.7), controlPoint1: CGPoint(x: 14.75, y: 2.17), controlPoint2: CGPoint(x: 15.38, y: 1.98))
        fill1Path.addCurveToPoint(CGPoint(x: 14.33, y: 3.53), controlPoint1: CGPoint(x: 15.53, y: 2.41), controlPoint2: CGPoint(x: 14.97, y: 3.03))
        fill1Path.addCurveToPoint(CGPoint(x: 14.34, y: 3.98), controlPoint1: CGPoint(x: 14.34, y: 3.68), controlPoint2: CGPoint(x: 14.34, y: 3.83))
        fill1Path.addCurveToPoint(CGPoint(x: 5.02, y: 14), controlPoint1: CGPoint(x: 14.34, y: 8.63), controlPoint2: CGPoint(x: 11.05, y: 14))
        fill1Path.closePath()
        fill1Path.miterLimit = 4;

        fill1Path.usesEvenOddFillRule = true;

        fillColor4.setFill()
        fill1Path.fill()
    }

    public class func drawGoingMark(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Welcome
        //// Going
        //// Shape-Copy Drawing
        let shapeCopyPath = UIBezierPath()
        shapeCopyPath.moveToPoint(CGPoint(x: 0, y: 0))
        shapeCopyPath.addLineToPoint(CGPoint(x: 0, y: 11.38))
        shapeCopyPath.addLineToPoint(CGPoint(x: 11.38, y: 11.38))
        shapeCopyPath.addLineToPoint(CGPoint(x: 11.38, y: 5.54))
        shapeCopyPath.addLineToPoint(CGPoint(x: 9.75, y: 7.17))
        shapeCopyPath.addLineToPoint(CGPoint(x: 9.75, y: 9.75))
        shapeCopyPath.addLineToPoint(CGPoint(x: 1.62, y: 9.75))
        shapeCopyPath.addLineToPoint(CGPoint(x: 1.62, y: 1.62))
        shapeCopyPath.addLineToPoint(CGPoint(x: 7.46, y: 1.62))
        shapeCopyPath.addLineToPoint(CGPoint(x: 9.08, y: 0))
        shapeCopyPath.addLineToPoint(CGPoint(x: 0, y: 0))
        shapeCopyPath.addLineToPoint(CGPoint(x: 0, y: 0))
        shapeCopyPath.closePath()
        shapeCopyPath.moveToPoint(CGPoint(x: 11.38, y: 0))
        shapeCopyPath.addLineToPoint(CGPoint(x: 6.5, y: 4.88))
        shapeCopyPath.addLineToPoint(CGPoint(x: 4.88, y: 3.25))
        shapeCopyPath.addLineToPoint(CGPoint(x: 3.25, y: 4.88))
        shapeCopyPath.addLineToPoint(CGPoint(x: 6.5, y: 8.12))
        shapeCopyPath.addLineToPoint(CGPoint(x: 13, y: 1.62))
        shapeCopyPath.addLineToPoint(CGPoint(x: 11.38, y: 0))
        shapeCopyPath.addLineToPoint(CGPoint(x: 11.38, y: 0))
        shapeCopyPath.closePath()
        shapeCopyPath.miterLimit = 4;

        shapeCopyPath.usesEvenOddFillRule = true;

        initColor.setFill()
        shapeCopyPath.fill()
    }

    public class func drawNotGoingMark(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Welcome
        //// Not-Going
        //// Shape Drawing
        let shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPoint(x: 0, y: 11.38))
        shapePath.addLineToPoint(CGPoint(x: 11.38, y: 11.38))
        shapePath.addLineToPoint(CGPoint(x: 11.38, y: 0))
        shapePath.addLineToPoint(CGPoint(x: 9.75, y: 0))
        shapePath.addLineToPoint(CGPoint(x: 9.75, y: 9.75))
        shapePath.addLineToPoint(CGPoint(x: 1.62, y: 9.75))
        shapePath.addLineToPoint(CGPoint(x: 1.62, y: 1.62))
        shapePath.addLineToPoint(CGPoint(x: 9.75, y: 1.62))
        shapePath.addLineToPoint(CGPoint(x: 9.75, y: 0))
        shapePath.addLineToPoint(CGPoint(x: 0, y: 0))
        shapePath.addLineToPoint(CGPoint(x: 0, y: 11.38))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        initColor.setFill()
        shapePath.fill()
    }

    //// Generated Images

    public class func imageOfMap(frame frame: CGRect = CGRect(x: 0, y: 92, width: 20, height: 28)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            Assets.drawMap(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfMap = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMap
    }

    public class var imageOfToggleallactive: UIImage {
        if Cache.imageOfToggleallactive != nil {
            return Cache.imageOfToggleallactive!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 9), false, 0)
            Assets.drawToggleallactive()

        Cache.imageOfToggleallactive = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfToggleallactive!
    }

    public class func imageOfTogglegoing(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 11), false, 0)
            Assets.drawTogglegoing(initColor: initColor)

        let imageOfTogglegoing = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTogglegoing
    }

    public class var imageOfUBER_API_Badge: UIImage {
        if Cache.imageOfUBER_API_Badge != nil {
            return Cache.imageOfUBER_API_Badge!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            Assets.drawUBER_API_Badge()

        Cache.imageOfUBER_API_Badge = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfUBER_API_Badge!
    }

    public class var imageOfGear: UIImage {
        if Cache.imageOfGear != nil {
            return Cache.imageOfGear!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 27), false, 0)
            Assets.drawGear()

        Cache.imageOfGear = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfGear!
    }

    public class func imageOfGoingMark(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 12), false, 0)
            Assets.drawGoingMark(initColor: initColor)

        let imageOfGoingMark = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGoingMark
    }

    public class func imageOfNotGoingMark(initColor initColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 12), false, 0)
            Assets.drawNotGoingMark(initColor: initColor)

        let imageOfNotGoingMark = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfNotGoingMark
    }

    //// Customization Infrastructure

    @IBOutlet var toggleallactiveTargets: [AnyObject]! {
        get { return Cache.toggleallactiveTargets }
        set {
            Cache.toggleallactiveTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: Assets.imageOfToggleallactive)
            }
        }
    }

    @IBOutlet var uBER_API_BadgeTargets: [AnyObject]! {
        get { return Cache.uBER_API_BadgeTargets }
        set {
            Cache.uBER_API_BadgeTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: Assets.imageOfUBER_API_Badge)
            }
        }
    }

    @IBOutlet var gearTargets: [AnyObject]! {
        get { return Cache.gearTargets }
        set {
            Cache.gearTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: Assets.imageOfGear)
            }
        }
    }

}
