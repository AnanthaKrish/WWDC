//
//  Assets.swift
//  WWDC
//
//  Created by Genady Okrain on 11/20/14.
//  Copyright (c) 2014 Sugar So Studio. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Assets : NSObject {

    //// Cache

    private struct Cache {
        static var color55: UIColor = UIColor(red: 0.970, green: 0.970, blue: 0.970, alpha: 1.000)
        static var imageOfToggleallactive: UIImage?
        static var toggleallactiveTargets: [AnyObject]?
    }

    //// Colors

    public class var color55: UIColor { return Cache.color55 }

    //// Drawing Methods

    public class func drawLocation() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color46 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)
        let color48 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color49 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 0.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 1)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// location
        //// Shape-2 Drawing
        var shape2Path = UIBezierPath()
        shape2Path.moveToPoint(CGPointMake(44, 20.22))
        shape2Path.addCurveToPoint(CGPointMake(22, 62), controlPoint1: CGPointMake(44, 38.55), controlPoint2: CGPointMake(22, 62))
        shape2Path.addCurveToPoint(CGPointMake(0, 20.22), controlPoint1: CGPointMake(22, 62), controlPoint2: CGPointMake(0, 38.99))
        shape2Path.addCurveToPoint(CGPointMake(22, 0), controlPoint1: CGPointMake(0, 9.05), controlPoint2: CGPointMake(9.85, 0))
        shape2Path.addCurveToPoint(CGPointMake(44, 20.22), controlPoint1: CGPointMake(34.15, 0), controlPoint2: CGPointMake(44, 9.05))
        shape2Path.addLineToPoint(CGPointMake(44, 20.22))
        shape2Path.closePath()
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = true;

        color49.setFill()
        shape2Path.fill()
        color46.setStroke()
        shape2Path.lineWidth = 3
        shape2Path.stroke()


        //// Oval-2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(13, 15, 18, 18))
        color48.setStroke()
        oval2Path.lineWidth = 3
        oval2Path.stroke()





        CGContextRestoreGState(context)
    }

    public class func drawAddToCalendar() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color52 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 0)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Portrait
        //// add-to-calendar
        //// Rectangle-303 Drawing
        let rectangle303Path = UIBezierPath(rect: CGRectMake(48, 0, 4, 11))
        color50.setFill()
        rectangle303Path.fill()


        //// Rectangle-304 Drawing
        let rectangle304Path = UIBezierPath(rect: CGRectMake(15, 0, 4, 11))
        color50.setFill()
        rectangle304Path.fill()


        //// Rectangle-29 Drawing
        var rectangle29Path = UIBezierPath()
        rectangle29Path.moveToPoint(CGPointMake(55.5, 59))
        rectangle29Path.addLineToPoint(CGPointMake(7.01, 59))
        rectangle29Path.addCurveToPoint(CGPointMake(0, 52.01), controlPoint1: CGPointMake(3.14, 59), controlPoint2: CGPointMake(0, 55.87))
        rectangle29Path.addLineToPoint(CGPointMake(0, 10.99))
        rectangle29Path.addCurveToPoint(CGPointMake(7.01, 4), controlPoint1: CGPointMake(0, 7.13), controlPoint2: CGPointMake(3.14, 4))
        rectangle29Path.addLineToPoint(CGPointMake(60.99, 4))
        rectangle29Path.addCurveToPoint(CGPointMake(68, 10.99), controlPoint1: CGPointMake(64.86, 4), controlPoint2: CGPointMake(68, 7.13))
        rectangle29Path.addLineToPoint(CGPointMake(68, 36))
        rectangle29Path.addLineToPoint(CGPointMake(65, 36))
        rectangle29Path.addLineToPoint(CGPointMake(65, 11.01))
        rectangle29Path.addCurveToPoint(CGPointMake(61, 7), controlPoint1: CGPointMake(65, 8.8), controlPoint2: CGPointMake(63.21, 7))
        rectangle29Path.addLineToPoint(CGPointMake(7, 7))
        rectangle29Path.addCurveToPoint(CGPointMake(3, 11.01), controlPoint1: CGPointMake(4.79, 7), controlPoint2: CGPointMake(3, 8.79))
        rectangle29Path.addLineToPoint(CGPointMake(3, 51.99))
        rectangle29Path.addCurveToPoint(CGPointMake(7, 56), controlPoint1: CGPointMake(3, 54.2), controlPoint2: CGPointMake(4.79, 56))
        rectangle29Path.addLineToPoint(CGPointMake(50, 56))
        rectangle29Path.addLineToPoint(CGPointMake(50, 59))
        rectangle29Path.addLineToPoint(CGPointMake(55.5, 59))
        rectangle29Path.closePath()
        rectangle29Path.miterLimit = 4;

        rectangle29Path.usesEvenOddFillRule = true;

        color52.setFill()
        rectangle29Path.fill()


        //// Rectangle-30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRectMake(65, 45, 3, 15))
        color52.setFill()
        rectangle30Path.fill()


        //// Rectangle-31 Drawing
        var rectangle31Path = UIBezierPath()
        rectangle31Path.moveToPoint(CGPointMake(59, 53.92))
        rectangle31Path.addLineToPoint(CGPointMake(74, 54.02))
        rectangle31Path.addLineToPoint(CGPointMake(74, 51))
        rectangle31Path.addLineToPoint(CGPointMake(59, 51))
        rectangle31Path.addLineToPoint(CGPointMake(59, 53.92))
        rectangle31Path.closePath()
        rectangle31Path.miterLimit = 4;

        rectangle31Path.usesEvenOddFillRule = true;

        color52.setFill()
        rectangle31Path.fill()







        CGContextRestoreGState(context)
    }

    public class func drawMap(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color49 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 0.000)
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)
        let color52 = UIColor(red: 0.341, green: 0.365, blue: 0.843, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.20000 * frame.width, frame.minY + 0.25000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// content
        //// map
        //// Shape Drawing
        var shapePath = UIBezierPath()
        shapePath.moveToPoint(CGPointMake(26, 11.74))
        shapePath.addCurveToPoint(CGPointMake(13, 36), controlPoint1: CGPointMake(26, 22.39), controlPoint2: CGPointMake(13, 36))
        shapePath.addCurveToPoint(CGPointMake(0, 11.74), controlPoint1: CGPointMake(13, 36), controlPoint2: CGPointMake(0, 22.64))
        shapePath.addCurveToPoint(CGPointMake(13, 0), controlPoint1: CGPointMake(0, 5.26), controlPoint2: CGPointMake(5.82, 0))
        shapePath.addCurveToPoint(CGPointMake(26, 11.74), controlPoint1: CGPointMake(20.18, 0), controlPoint2: CGPointMake(26, 5.26))
        shapePath.addLineToPoint(CGPointMake(26, 11.74))
        shapePath.closePath()
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = true;

        color49.setFill()
        shapePath.fill()
        color52.setStroke()
        shapePath.lineWidth = 2
        shapePath.stroke()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath(ovalInRect: CGRectMake(8, 9, 9, 9))
        color50.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()









        CGContextRestoreGState(context)
    }

    public class func drawBlankstate() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color53 = UIColor(red: 0.902, green: 0.902, blue: 0.902, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Blank-State
        //// toggle-going-2 Drawing
        var togglegoing2Path = UIBezierPath()
        togglegoing2Path.moveToPoint(CGPointMake(198.15, 0))
        togglegoing2Path.addLineToPoint(CGPointMake(224, 25.8))
        togglegoing2Path.addLineToPoint(CGPointMake(73.23, 176.03))
        togglegoing2Path.addLineToPoint(CGPointMake(0, 102.93))
        togglegoing2Path.addLineToPoint(CGPointMake(25.85, 77.13))
        togglegoing2Path.addLineToPoint(CGPointMake(73.23, 124.43))
        togglegoing2Path.addLineToPoint(CGPointMake(198.15, 0))
        togglegoing2Path.closePath()
        togglegoing2Path.miterLimit = 4;

        togglegoing2Path.usesEvenOddFillRule = true;

        color53.setFill()
        togglegoing2Path.fill()





        CGContextRestoreGState(context)
    }

    public class func drawGoing() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color54 = UIColor(red: 0.174, green: 0.774, blue: 0.368, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 1)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// content
        //// item
        //// Fill-1 Drawing
        var fill1Path = UIBezierPath()
        fill1Path.moveToPoint(CGPointMake(8.5, 14.47))
        fill1Path.addLineToPoint(CGPointMake(23, 0))
        fill1Path.addLineToPoint(CGPointMake(26, 3))
        fill1Path.addLineToPoint(CGPointMake(8.5, 20.47))
        fill1Path.addLineToPoint(CGPointMake(0, 11.97))
        fill1Path.addLineToPoint(CGPointMake(3, 8.97))
        fill1Path.addLineToPoint(CGPointMake(8.5, 14.47))
        fill1Path.closePath()
        fill1Path.miterLimit = 4;

        fill1Path.usesEvenOddFillRule = true;

        color54.setFill()
        fill1Path.fill()









        CGContextRestoreGState(context)
    }

    public class func drawToggleallactive() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color50 = UIColor(red: 0.341, green: 0.366, blue: 0.829, alpha: 1.000)

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// Segmented-Control
        //// toggle-all-active
        //// Bezier 2 Drawing
        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(0, 0))
        bezier2Path.addLineToPoint(CGPointMake(0, 3))
        bezier2Path.addLineToPoint(CGPointMake(29, 3))
        bezier2Path.addLineToPoint(CGPointMake(29, 0))
        bezier2Path.addLineToPoint(CGPointMake(0, 0))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 7))
        bezier2Path.addLineToPoint(CGPointMake(0, 10))
        bezier2Path.addLineToPoint(CGPointMake(29, 10))
        bezier2Path.addLineToPoint(CGPointMake(29, 7))
        bezier2Path.addLineToPoint(CGPointMake(0, 7))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(0, 14))
        bezier2Path.addLineToPoint(CGPointMake(0, 17))
        bezier2Path.addLineToPoint(CGPointMake(29, 17))
        bezier2Path.addLineToPoint(CGPointMake(29, 14))
        bezier2Path.addLineToPoint(CGPointMake(0, 14))
        bezier2Path.closePath()
        bezier2Path.miterLimit = 4;

        bezier2Path.usesEvenOddFillRule = true;

        color50.setFill()
        bezier2Path.fill()









        CGContextRestoreGState(context)
    }

    public class func drawTogglegoing(#initColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Welcome
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// Main
        //// Segmented-Control
        //// toggle-going Drawing
        var togglegoingPath = UIBezierPath()
        togglegoingPath.moveToPoint(CGPointMake(8.5, 14.47))
        togglegoingPath.addLineToPoint(CGPointMake(23, 0))
        togglegoingPath.addLineToPoint(CGPointMake(26, 3))
        togglegoingPath.addLineToPoint(CGPointMake(8.5, 20.47))
        togglegoingPath.addLineToPoint(CGPointMake(0, 11.97))
        togglegoingPath.addLineToPoint(CGPointMake(3, 8.97))
        togglegoingPath.addLineToPoint(CGPointMake(8.5, 14.47))
        togglegoingPath.closePath()
        togglegoingPath.miterLimit = 4;

        togglegoingPath.usesEvenOddFillRule = true;

        initColor.setFill()
        togglegoingPath.fill()







        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfToggleallactive: UIImage {
        if Cache.imageOfToggleallactive != nil {
            return Cache.imageOfToggleallactive!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(15, 9), false, 0)
            Assets.drawToggleallactive()

        Cache.imageOfToggleallactive = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfToggleallactive!
    }

    public class func imageOfTogglegoing(#initColor: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(13, 11), false, 0)
            Assets.drawTogglegoing(initColor: initColor)

        let imageOfTogglegoing = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTogglegoing
    }

    //// Customization Infrastructure

    @IBOutlet var toggleallactiveTargets: [AnyObject]! {
        get { return Cache.toggleallactiveTargets }
        set {
            Cache.toggleallactiveTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(Assets.imageOfToggleallactive)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
